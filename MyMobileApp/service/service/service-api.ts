const API_BASE_URL = process.env.EXPO_PUBLIC_API_URL;
import AsyncStorage from "@react-native-async-storage/async-storage";

// üîë Helper: L·∫•y token & tr·∫£ v·ªÅ header
const getAuthHeader = async () => {
  const token = await AsyncStorage.getItem("userToken");
  if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y userToken!");
  return { Authorization: `Bearer ${token}` };
};

// üîç L·∫•y t·∫•t c·∫£ d·ªãch v·ª•
export const getAllServices = async () => {
  const response = await fetch(`${API_BASE_URL}/services`, {
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!response.ok) throw new Error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•");
  return response.json();
};

// üîç L·∫•y chi ti·∫øt 1 d·ªãch v·ª• theo ID
export const getServiceById = async (id: string) => {
  const response = await fetch(`${API_BASE_URL}/services/${id}`, {
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!response.ok) throw new Error(`L·ªói khi l·∫•y d·ªãch v·ª• ID: ${id}`);
  return response.json();
};

// ‚ûï T·∫°o m·ªõi d·ªãch v·ª•
export const createService = async (data: any) => {
  const headers = await getAuthHeader();
  const response = await fetch(`${API_BASE_URL}/services`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...headers,
    },
    body: JSON.stringify(data),
  });
  if (!response.ok) throw new Error("L·ªói khi t·∫°o d·ªãch v·ª•");
  return response.json();
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t d·ªãch v·ª• theo ID
export const updateService = async (id: string, data: any) => {
  const headers = await getAuthHeader();
  const response = await fetch(`${API_BASE_URL}/services/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      ...headers,
    },
    body: JSON.stringify(data),
  });
  if (!response.ok) throw new Error(`L·ªói khi c·∫≠p nh·∫≠t d·ªãch v·ª• ID: ${id}`);
  return response.json();
};

// ‚ùå Xo√° d·ªãch v·ª• theo ID
export const deleteService = async (id: string) => {
  const headers = await getAuthHeader();
  const response = await fetch(`${API_BASE_URL}/services/${id}`, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
      ...headers,
    },
  });
  if (!response.ok) throw new Error(`L·ªói khi xo√° d·ªãch v·ª• ID: ${id}`);
  return response.json();
};
